---
- module_name: carla
  doc: >
  # - CLASSES ------------------------------
  classes:
  - class_name: SensorData
    # - DESCRIPTION ------------------------
    doc: >
      Base class for all the objects containing data generated by a sensor.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: frame
      type: int
      doc: >
        Frame count when the data was generated.
    - var_name: timestamp
      type: float
      doc: >
        Simulation-time when the data was generated.
    - var_name: transform
      type: carla.Transform
      doc: >
        Sensor's transform when the data was generated.
    # --------------------------------------

  - class_name: ColorConverter
    # - DESCRIPTION ------------------------
    doc: >
      Class that defines the color converter options. Check out this [`recipe`](../python_cookbook/#converted-image-recipe)!
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: Raw
      doc: >
    - var_name: Depth
      doc: >
    - var_name: LogarithmicDepth
      doc: >
    - var_name: CityScapesPalette
      doc: >

  - class_name: Image
    parent: carla.SensorData
    # - DESCRIPTION ------------------------
    doc: >
      Class that defines an image of 32-bit BGRA colors.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: width
      type: int
      doc: >
        Image width in pixels.
    - var_name: height
      type: int
      doc: >
        Image height in pixels
    - var_name: fov
      type: float
      doc: >
        Horizontal field of view of the image in degrees.
    - var_name: raw_data
      type: bytes
      doc: >
    # - METHODS ----------------------------
    methods:
    - def_name: convert
      params:
      - param_name: color_converter
        type: carla.ColorConverter
      doc: >
        Convert the image with the applied conversion.
    # --------------------------------------
    - def_name: save_to_disk
      params:
      - param_name: path
        type: str
        doc: >
          Path where it will be saved
      - param_name: color_converter
        type: carla.ColorConverter
        default: Raw
      doc: >
        Save the image to disk.
    # --------------------------------------
    - def_name: __len__
      doc: >
    # --------------------------------------
    - def_name: __iter__
      doc: >
    # --------------------------------------
    - def_name: __getitem__
      params:
      - param_name: pos
        type: int
      doc: >
    # --------------------------------------
    - def_name: __setitem__
      params:
      - param_name: pos
        type: int
      - param_name: color
        type: carla.Color
      doc: >
    # --------------------------------------
    - def_name: __str__
      doc: >
    # --------------------------------------

  - class_name: LidarMeasurement
    parent: carla.SensorData
    # - DESCRIPTION ------------------------
    doc: >
      Lidar sensor measurement data.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: horizontal_angle
      type: float
      doc: >
        Horizontal angle that the Lidar has rotated at the time of the measurement (in radians)
    - var_name: channels
      type: int
      doc: >
        Number of lasers
    - var_name: raw_data
      type: bytes
      doc: >
        List of 3D points
    # - METHODS ----------------------------
    methods:
    - def_name: get_point_count
      params:
      - param_name: channel
        type: int
      doc: >
        Retrieve the number of points that are generated by this channel.
      note: >
        Points are sorted by channel, so this method allows to identify the channel
        that generated each point.
    # --------------------------------------
    - def_name: save_to_disk
      params:
      - param_name: path
        type: str
      doc: >
        Save point cloud to disk
    # --------------------------------------
    - def_name: __len__
      doc: >
    # --------------------------------------
    - def_name: __iter__
      doc: >
    # --------------------------------------
    - def_name: __getitem__
      params:
      - param_name: pos
        type: int
      doc: >
    # --------------------------------------
    - def_name: __setitem__
      params:
      - param_name: pos
        type: int
      - param_name: location
        type: carla.Location
      doc: >
    # --------------------------------------
    - def_name: __str__
      doc: >
    # --------------------------------------

  - class_name: CollisionEvent
    parent: carla.SensorData
    # - DESCRIPTION ------------------------
    doc: >
      Class that defines a registered collision.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: actor
      type: carla.Actor
      doc: >
        Get "self" actor. Actor that measured the collision.
    - var_name: other_actor
      type: carla.Actor
      doc: >
        Get the actor to which we collided.
    - var_name: normal_impulse
      type: carla.Vector3D
      doc: >
        Normal impulse result of the collision.

  - class_name: ObstacleDetectionEvent
    parent: carla.SensorData
    # - DESCRIPTION ------------------------
    doc: >
      Obstacle detection sensor data
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: actor
      type: carla.Actor
      doc: >
        Get "self" actor. Actor that measured the collision.
    - var_name: other_actor
      type: carla.Actor
      doc: >
        Get the actor to which we collided.
    - var_name: distance
      type: float
      doc: >
        Get obstacle distance.
    # - METHODS ----------------------------
    methods:
    - def_name: __str__
      doc: >
    # --------------------------------------

  - class_name: LaneInvasionEvent
    parent: carla.SensorData
    # - DESCRIPTION ------------------------
    doc: >
      Lane invasion sensor data.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: actor
      type: carla.Actor
      doc: >
        Get "self" actor. Actor that invaded another lane.
    - var_name: crossed_lane_markings
      type: list(carla.LaneMarking)
      doc: >
        List of lane markings that have been crossed.
    # - METHODS ----------------------------
    methods:
    - def_name: __str__
      doc: >
    # --------------------------------------

  - class_name: GnssMeasurement
    parent: carla.SensorData
    # - DESCRIPTION ------------------------
    doc: >
      Gnss sensor data
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: latitude
      type: float
      doc: >
        North/South value of a point on the map.
    - var_name: longitude
      type: float
      doc: >
        West/East value of a point on the map.
    - var_name: altitude
      type: float
      doc: >
        Height regarding ground level.
    # - METHODS ----------------------------
    methods:
    - def_name: __str__
      doc: >
    # --------------------------------------

  - class_name: IMUMeasurement
    parent: carla.SensorData
    # - DESCRIPTION ------------------------
    doc: >
      IMU sensor data regarding the sensor World's transformation
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: accelerometer
      type: carla.Vector3D
      doc: >
        Measures linear acceleration in `m/s^2`.
    - var_name: gyroscope
      type: carla.Vector3D
      doc: >
        Measures angular velocity in `rad/sec`.
    - var_name: compass
      type: float
      doc: >
        Orientation with respect to the North (`(0.0, -1.0, 0.0)` in Unreal) in radians.
    # - METHODS ----------------------------
    methods:
    - def_name: __str__
      doc: >
    # --------------------------------------

  - class_name: RadarMeasurement
    parent: carla.SensorData
    # - DESCRIPTION ------------------------
    doc: >
      Measurement produced by a Radar. Consists of an array of carla.RadarDetection.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: raw_data
      type: bytes
      doc: >
        List of carla.RadarDetection.
    # - METHODS ----------------------------
    methods:
    - def_name: get_detection_count
      doc: >
        Retrieve the number of carla.RadarDetection that are generated.
    # --------------------------------------
    - def_name: __len__
      doc: >
    # --------------------------------------
    - def_name: __iter__
      doc: >
    # --------------------------------------
    - def_name: __getitem__
      params:
      - param_name: pos
        type: int
      doc: >
    # --------------------------------------
    - def_name: __setitem__
      params:
      - param_name: pos
        type: int
      - param_name: detection
        type: carla.RadarDetection
      doc: >
    # --------------------------------------
    - def_name: __str__
      doc: >
    # --------------------------------------

  - class_name: RadarDetection
    # - DESCRIPTION ------------------------
    doc: >
      Data contained by a carla.RadarMeasurement. Represents an object detection produced by the Radar sensor.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: velocity
      type: float
      doc: >
        The velocity of the detected object towards the sensor in meters per second.
    # --------------------------------------
    - var_name: azimuth
      type: float
      doc: >
        Azimuth angle of the detection in radians
    # --------------------------------------
    - var_name: altitude
      type: float
      doc: >
        Altitude angle of the detection in radians
    # --------------------------------------
    - var_name: depth
      type: float
      doc: >
        Distance in meters from the sensor to the detection position.
    # - METHODS ----------------------------
    methods:
    - def_name: __str__
      doc: >
    # --------------------------------------
...
